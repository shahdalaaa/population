# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ln28tUbPfW8aVOe7-VqxpE6xxoA7qgK4
"""

import random
import numpy as np

def fitness_function(individual):

    return sum(individual)

def create_population(pop_size, gene_length):
    return [np.random.randint(2, size=gene_length).tolist() for _ in range(pop_size)]


def select_parents(population, fitness_scores):
    total_fitness = sum(fitness_scores)
    probabilities = [fitness / total_fitness for fitness in fitness_scores]
    parents = random.choices(population, weights=probabilities, k=2)
    return parents

def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    child1 = parent1[:point] + parent2[point:]
    child2 = parent2[:point] + parent1[point:]
    return child1, child2


def mutate(individual, mutation_rate):
    for i in range(len(individual)):
        if random.random() < mutation_rate:
            individual[i] = 1 - individual[i]


def genetic_algorithm(pop_size, gene_length, generations, mutation_rate):

    population = create_population(pop_size, gene_length)

    for generation in range(generations):

        fitness_scores = [fitness_function(ind) for ind in population]


        best_fitness = max(fitness_scores)
        print(f"Generation {generation}: Best Fitness = {best_fitness}")


        new_population = []
        while len(new_population) < pop_size:

            parent1, parent2 = select_parents(population, fitness_scores)


            child1, child2 = crossover(parent1, parent2)


            mutate(child1, mutation_rate)
            mutate(child2, mutation_rate)


            new_population.append(child1)
            new_population.append(child2)


        population = new_population[:pop_size]


    fitness_scores = [fitness_function(ind) for ind in population]
    best_index = fitness_scores.index(max(fitness_scores))
    return population[best_index], max(fitness_scores)

population_size = 10
gene_length = 8
generations = 20
mutation_rate = 0.1

best_solution, best_fitness = genetic_algorithm(population_size, gene_length, generations, mutation_rate)
print(f"Best Solution: {best_solution}, Best Fitness: {best_fitness}")